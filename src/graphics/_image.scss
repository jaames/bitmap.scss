// ref: 
// http://www.ece.ualberta.ca/~elliott/ee552/studentAppNotes/2003_w/misc/bmp_file_format/bmp_file_format.htm
// https://github.com/jaames/flipnote.js/blob/master/src/encoders/bmp.ts

@use '../encoding/base64' as b64;
@use '../util/bytearray';
@use '../util/dataview';

@function create($width: 1, $height: 1, $num-colors: 256) {
  $pad-width: ceil($width / 4) * 4;
  @return (
    width: $width,
    pad-width: $pad-width,
    height: $height,
    colors: $num-colors,
    palette: bytearray.alloc($num-colors * 4), // colors in BGRA order
    pixels: bytearray.alloc($pad-width * $height) // 8 bits per pixel for paletted color
  );
}

@function set-palette-color($image, $index, $color) {
  $palette: map-get($image, palette);
  $ptr: $index * 4;
  $palette: set-nth($palette, $ptr + 1, blue($color));
  $palette: set-nth($palette, $ptr + 2, green($color));
  $palette: set-nth($palette, $ptr + 3, red($color));
  $palette: set-nth($palette, $ptr + 4, alpha($color));
  @return map-merge($image, (palette: $palette));
}

@function set-pixel($image, $x, $y, $color-index) {
  $pixels: map-get($image, pixels);
  $width: map-get($image, width);
  $pad-width: map-get($image, pad-width);
  $height: map-get($image, height);
  // don't draw pixels out of bounds!
  @if $x < 0 or $x >= $width {
    @return $image;
  }
  @if $y < 0 or $y >= $height {
    @return $image;
  }
  // $ptr: $y * $pad-width + $x;
  // y is packed upside down in bitmaps
  $ptr: (length($pixels) - (($y + 1) * $pad-width)) + $x;
  $pixels: set-nth($pixels, $ptr + 1, $color-index);
  @return map-merge($image, (pixels: $pixels));
}

@function encode-bitmap($image) {
  $width: map-get($image, width);
  $height: map-get($image, height);
  $num-colors: map-get($image, colors);
  $palette: map-get($image, palette);
  $pixels: map-get($image, pixels);

  // $pixels: _pad-pixels($pixels, $width, $height);

  $palette-size: length($palette);
  $pixels-size: length($pixels);

  $dib-view: _get-bitmap-dib-header($width, $height, 8, $num-colors);
  $dib-bytes: dataview.to-bytearray($dib-view);
  $dib-size: length($dib-bytes);

  $file-size: 14 + $dib-size + $palette-size + $pixels-size;
  $pixeldata-ptr: 14 + $dib-size + $palette-size;

  $header-view: _get-bitmap-file-header($file-size, $pixeldata-ptr);
  $header-bytes: dataview.to-bytearray($header-view);

  $bmp: join($header-bytes, $dib-bytes);
  $bmp: join($bmp, $palette);
  @return join($bmp, $pixels);
}

@function encode-bitmap-dataurl($image) {
  $bytes: encode-bitmap($image);
  @return url('data:image/bmp;base64,' + b64.encode-bytes($bytes));
}

@function _get-bitmap-file-header($file-size, $pixeldata-ptr) {
  $view: dataview.alloc(14);
  // header magic
  $view: dataview.set-ascii($view, 'BM');
  // file length
  $view: dataview.set-uint32($view, $file-size);
  // pixel data offset
  $view: dataview.seek($view, 10);
  $view: dataview.set-uint32($view, $pixeldata-ptr);
  @return $view;
}

@function _get-bitmap-dib-header($width, $height, $bpp, $num-colors) {
  $image-size: $width * $height * ($bpp / 8);
  $view: dataview.alloc(40);
  // dib header size (using BITMAPINFOHEADER variant)
  $view: dataview.set-uint32($view, 40);
  // image dimensions
  $view: dataview.set-uint32($view, $width);
  $view: dataview.set-uint32($view, $height);
  // color panes (always 1)
  $view: dataview.set-uint16($view, 1);
  // bits per pixel
  $view: dataview.set-uint16($view, $bpp);
  // compression: 0 = 8 bits per pixel, no compression
  $view: dataview.set-uint32($view, 0);
  // image data size
  $view: dataview.set-uint32($view, $image-size);
  // x and y res, pixels per meter
  $view: dataview.set-uint32($view, 3780);
  $view: dataview.set-uint32($view, 3780);
  // number of colors in the palette
  $view: dataview.set-uint32($view, $num-colors);
  // number of important colors - 0
  $view: dataview.set-uint32($view, 0);
  @return $view;
}

// @function _pad-pixels($src-pixels, $width, $height) {
//   $src-size: length($src-pixels);
//   // x axis should be padded to nearest multiple of 4
//   $pad-width: ceil($width / 4) * 4;
//   $dst-pixels: bytearray.alloc($pad-width * $height);
//   @for $y from 0 to $height {
//     // y axis should be flipped
//     $src-ptr: ($src-size - (($y + 1) * $width)) + 1;
//     $dst-ptr: ($y * $pad-width) + 1;
//     @for $x from 0 to $width {
//       $src-pixel: nth($src-pixels, $src-ptr + $x);
//       // optimisation: dst is already 0, so we can avoid an expensive set-nth in this case
//       @if $src-pixel != 0 {
//         $dst-pixels: set-nth($dst-pixels, $dst-ptr + $x, $src-pixel);
//       }
//     } 
//   }
//   @return $dst-pixels;
// }